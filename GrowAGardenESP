----------------------this is test version it may lag u get it?


getgenv().Effect = "Swirls"
getgenv().ESP = false
getgenv().OwnerGarden = nil

local player = game.Players.LocalPlayer

local function handleESP(partToAttach, plantName, hasEffect)
    if not partToAttach or not partToAttach:IsA("BasePart") then return end

    local existingESP = partToAttach:FindFirstChild("ESP")
    if getgenv().ESP and hasEffect and not existingESP then
        local BillboardGui = Instance.new("BillboardGui")
        local TextLabel = Instance.new("TextLabel")
        BillboardGui.Parent = partToAttach
        BillboardGui.Name = "ESP"
        BillboardGui.AlwaysOnTop = true
        BillboardGui.Size = UDim2.new(0, 200, 0, 50)
        BillboardGui.StudsOffset = Vector3.new(0, 2.5, 0)

        TextLabel.Parent = BillboardGui
        TextLabel.BackgroundTransparency = 1
        TextLabel.Size = UDim2.new(0, 200, 0, 50)
        TextLabel.Font = Enum.Font.GothamBold
        TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        TextLabel.TextStrokeTransparency = 0
        TextLabel.TextSize = 15
        TextLabel.TextWrapped = true

        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        local dist = hrp and math.floor((hrp.Position - partToAttach.Position).Magnitude) or 0
        TextLabel.Text = plantName
        print("ESP created on", partToAttach:GetFullName(), "with name:", plantName)
        wait(0.15)
    elseif (not getgenv().ESP or not hasEffect) and existingESP then
        existingESP:Destroy()
        print("ESP removed from:", partToAttach:GetFullName())
    end
end

spawn(function()
    while task.wait(1) do
        if getgenv().ESP then
            pcall(function()
                for _, farm in pairs(workspace.Farm:GetDescendants()) do
                    if farm.Name == "Important" then
                        local data = farm:FindFirstChild("Data") and farm.Data:FindFirstChild("Owner")
                        local plant = farm:FindFirstChild("Plants_Physical")

                        if plant and data and data.Value == getgenv().OwnerGarden then
                            for _, model in pairs(plant:GetChildren()) do
                                if model:IsA("Model") then
                                    local targetPart
                                    for _, part in pairs(model:GetDescendants()) do
                                        if part:IsA("BasePart") then
                                            for _, child in pairs(part:GetChildren()) do
                                                if string.match(child.Name, "^" .. getgenv().Effect) then
                                                    targetPart = part
                                                    break
                                                end
                                            end
                                        end
                                        if targetPart then break end
                                    end
                                    handleESP(targetPart, model.Name, targetPart ~= nil)
                                end
                            end
                        end
                    end
                end
            end)
        end
    end
end)

local Rayfield = loadstring(game:HttpGet("https://raw.githubusercontent.com/bank124/Axis-Hub/main/rayfieldgui"))()
local Window = Rayfield:CreateWindow({
    Name = "Axis Hub : Grow A Garden",
    LoadingTitle = "Version: 1.0.0",
    LoadingSubtitle = "by ttaapper1247",
})
local Main = Window:CreateTab("Main", 4370033185)

local playerList = {}
local ownerDropdown


local function updatePlayers()
    playerList = {}
    for _, player in pairs(game.Players:GetPlayers()) do
        table.insert(playerList, player.Name)
        print("Refreshing...")
    end
    if ownerDropdown then
        ownerDropdown:Refresh(playerList)
    end
end

updatePlayers()

ownerDropdown = Main:CreateDropdown({
    Name = "Select Garden Owner",
    Options = playerList,
    CurrentOption = "None",
    Flag = "OwnerSelect",
    Callback = function(selectedPlayer)
        local name
        if typeof(selectedPlayer) == "string" then
            name = selectedPlayer
        elseif typeof(selectedPlayer) == "table" and #selectedPlayer > 0 then
            name = selectedPlayer[1]
        else
            name = ""
        end

        if getgenv().OwnerGarden then
            for _, farm in pairs(workspace.Farm:GetDescendants()) do
                if farm.Name == "Important" then
                    local data = farm:FindFirstChild("Data") and farm.Data:FindFirstChild("Owner")
                    local plant = farm:FindFirstChild("Plants_Physical")
                    if data and plant and data.Value == getgenv().OwnerGarden then
                        for _, model in pairs(plant:GetDescendants()) do
                            if model:IsA("Model") then
                                for _, part in pairs(model:GetDescendants()) do
                                    if part:IsA("BasePart") then
                                        local esp = part:FindFirstChild("ESP")
                                        if esp then esp:Destroy() end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
        getgenv().OwnerGarden = name
        print("Garden owner set to:", name)
    end,
})

Main:CreateButton({
    Name = "ðŸ”„ Refresh Player List",
    Callback = function()
        updatePlayers()
        print("Player list refreshed!")
        if ownerDropdown and typeof(ownerDropdown.SetOptions) == "function" then
            local success, err = pcall(function()
                ownerDropdown:Refresh(playerList)
            end)
            if not success then
                warn("Dropdown refresh failed:", err)
            end
        else
            warn("Dropdown not ready or SetOptions method missing")
        end
    end,
})




Main:CreateDropdown({
    Name = "Select Mutation Name",
    Options = {
        "Moonlit",
        "Wet",
        "Shocked",
        "Chilled",
        "Frozen"
    },
    CurrentOption = "Moonlit",
    Flag = "MutationSelect",
    Callback = function(displayName)
        local name = typeof(displayName) == "table" and displayName[1] or displayName
        local mutationMap = {
            Moonlit = "Swirls",
            Wet = "Wet",
            Shocked = "Shocked",
            Chilled = "Chilled",
            Frozen = "Frozen",
        }
        getgenv().Effect = mutationMap[name]
        print("Mutation changed to:", getgenv().Effect)
    end,
})




Main:CreateToggle({
    Name = "ESP Mutation",
    CurrentValue = false,
    Flag = "ESP",
    Callback = function(t)
        getgenv().ESP = t
        print("ESP toggled:", t)
        if not t then
            for _, farm in pairs(workspace.Farm:GetDescendants()) do
                if farm.Name == "Important" then
                    local data = farm:FindFirstChild("Data") and farm.Data:FindFirstChild("Owner")
                    local plant = farm:FindFirstChild("Plants_Physical")
                    if data and plant and data.Value == getgenv().OwnerGarden then
                        for _, model in pairs(plant:GetDescendants()) do
                            if model:IsA("Model") then
                                for _, part in pairs(model:GetDescendants()) do
                                    if part:IsA("BasePart") then
                                        local esp = part:FindFirstChild("ESP")
                                        if esp then esp:Destroy() end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end,
})

