-- Decompiler will be improved VERY SOON!
-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2025-04-08 00:12:28
-- Luau version 6, Types version 3
-- Time taken: 0.020045 seconds

local module = {}
local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local Tween_upvr = require(ReplicatedStorage_upvr.Modules.Tween)
local Icons_upvr = require(ReplicatedStorage_upvr.Modules.Icons)
local Rarity_upvr = require(ReplicatedStorage_upvr.Modules.Rarity)
local RollFunctions_upvr = require(ReplicatedStorage_upvr.Modules.RollFunctions)
local LocalPlayer_upvr = game.Players.LocalPlayer
local ScreenGui_upvr = LocalPlayer_upvr.PlayerGui:WaitForChild("ScreenGui")
local Energy_upvr = ScreenGui_upvr.ButtomAlign.Energy
local Shop_upvr = ScreenGui_upvr.CenterAlign.Shop
local tbl_3_upvr = {"rbxassetid://124766823466420", "rbxassetid://78007455082235", "rbxassetid://115419785276707", "rbxassetid://87224783480311", "rbxassetid://75977940119451", "rbxassetid://82145442479907", "rbxassetid://78838233018876", "rbxassetid://128536288674404", "rbxassetid://112522388650621", "rbxassetid://101743495976882", "rbxassetid://126716062148120", "rbxassetid://139478290910461", "rbxassetid://127737022130634", "rbxassetid://78740400487639", "rbxassetid://100870649100146", "rbxassetid://115341738659570", "rbxassetid://139863090878774", "rbxassetid://107513051382657", "rbxassetid://71894664650216", "rbxassetid://74519565416806", "rbxassetid://72158087811131", "rbxassetid://75986647942328", "rbxassetid://115194577859649", "rbxassetid://106361692487750", "rbxassetid://130745982749780", "rbxassetid://135599050129996", "rbxassetid://95818974218568", "rbxassetid://121168092570169", "rbxassetid://81756938795441", "rbxassetid://107017020796010", "rbxassetid://108825857495071", "rbxassetid://88819598023189", "rbxassetid://82944586969491", "rbxassetid://76828449606975", "rbxassetid://126608848639818", "rbxassetid://112997556739218", "rbxassetid://84337446597033", "rbxassetid://108300435528852", "rbxassetid://102187036862656", "rbxassetid://102187036862656", "rbxassetid://77194298284231", "rbxassetid://106246628596866", "rbxassetid://109714473549668", "rbxassetid://126321496581367", "rbxassetid://73081921716231", "rbxassetid://90110330474897", "rbxassetid://94728741264692", "rbxassetid://136746650662379", "rbxassetid://73601281512409", "rbxassetid://75203435759052"}
local _ = {0, 1, -1, 2, -2}
local var13_upvw = false
local var14_upvw = false
local var15_upvw = false
local var16_upvw = 1
local tbl_2_upvr = {
	Common = 1;
	Uncommon = 2;
	Rare = 3;
	Epic = 4;
	Legendary = 5;
	Mythical = 6;
}
RarityTable = {
	Common = "1 in 2";
	Uncommon = "1 in 5";
	Rare = "1 in 10";
	Epic = "1 in 100";
	Legendary = "1 in 10,000";
	Mythical = "1 in 100,000";
} -- Setting global
local function formatNumber_upvr(arg1) -- Line 116, Named "formatNumber"
	local tostring_result1 = tostring(math.floor(arg1))
	if tostring_result1:find("%.") then
		local any_match_result1, any_match_result2 = tostring_result1:match("^(%d+)(%.%d+)$")
		any_match_result1 = any_match_result1:reverse():gsub("(%d%d%d)", "%1,"):reverse()
		local var22 = any_match_result1
		if var22:sub(1, 1) == ',' then
			var22 = var22:sub(2)
		end
		return var22..any_match_result2
	end
	local any_reverse_result1 = tostring_result1:reverse():gsub("(%d%d%d)", "%1,"):reverse()
	if any_reverse_result1:sub(1, 1) == ',' then
		any_reverse_result1 = any_reverse_result1:sub(2)
	end
	return any_reverse_result1
end
local function _(arg1) -- Line 139, Named "initGlitch"
	--[[ Upvalues[1]:
		[1]: Tween_upvr (readonly)
	]]
	task.spawn(function() -- Line 140
		--[[ Upvalues[2]:
			[1]: arg1 (readonly)
			[2]: Tween_upvr (copied, readonly)
		]]
		for _ = 1, 5 do
			task.wait(0.02)
			local clone_2 = arg1.FalseFrame1:Clone()
			clone_2.Position = arg1.FalseFrame1.Position
			clone_2.ImageLabel.Visible = false
			clone_2.Parent = arg1
			Tween_upvr:Play(clone_2.ImageLabel, 0.5, {
				ImageTransparency = 1;
			})
			game.Debris:AddItem(clone_2, 0.5)
			arg1.FalseFrame1.Position = UDim2.fromScale(0.5 + math.random() / 30, 0.5 + math.random() / 30)
		end
		task.wait(0.02)
		arg1.FalseFrame1.Position = UDim2.fromScale(0.5, 0.5)
	end)
end
local function _() -- Line 172, Named "calculateRollSpeed"
end
local Equipment_upvr = require(ReplicatedStorage_upvr.Modules.Equipment)
function fakeRoll(arg1) -- Line 176
	--[[ Upvalues[4]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: RollFunctions_upvr (readonly)
		[3]: LocalPlayer_upvr (readonly)
		[4]: Equipment_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 21 start (CF ANALYSIS FAILED)
	local var32 = require(ReplicatedStorage_upvr.Modules.Ranks)[LocalPlayer_upvr:GetAttribute("Rank")]
	local var33
	if arg1 then
		var32 = math.random(100, 2000)
	else
		var32 = 1
	end
	local any_Roll_result1 = RollFunctions_upvr.Roll(var33, var32.luck_boost * var32)
	-- KONSTANTERROR: [0] 1. Error Block 21 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [33] 27. Error Block 22 start (CF ANALYSIS FAILED)
	if 1 < #Equipment_upvr[any_Roll_result1] then
		var33 = math.random(1, #Equipment_upvr[any_Roll_result1])
	else
		-- KONSTANTERROR: [47] 39. Error Block 8 start (CF ANALYSIS FAILED)
		var33 = 1
		-- KONSTANTERROR: [47] 39. Error Block 8 end (CF ANALYSIS FAILED)
	end
	if Equipment_upvr[any_Roll_result1] then
		if Equipment_upvr[any_Roll_result1][var33] then
			return Equipment_upvr[any_Roll_result1][var33], any_Roll_result1
		end
	end
	do
		return fakeRoll()
	end
	-- KONSTANTERROR: [33] 27. Error Block 22 end (CF ANALYSIS FAILED)
end
local function playSounds_upvr(arg1) -- Line 189, Named "playSounds"
	--[[ Upvalues[3]:
		[1]: Tween_upvr (readonly)
		[2]: var16_upvw (read and write)
		[3]: var14_upvw (read and write)
	]]
	game.SoundService.StartRoll1:Play()
	game.SoundService.StartRoll2:Play()
	game.SoundService.Rolling1:Play()
	game.SoundService.Rolling2:Play()
	Tween_upvr:Play(game.SoundService.Rolling1, 5 / var16_upvw, {
		Volume = 0;
	})
	Tween_upvr:Play(game.SoundService.Rolling2, 5 / var16_upvw, {
		Volume = 0;
	})
	task.spawn(function() -- Line 200
		--[[ Upvalues[4]:
			[1]: arg1 (readonly)
			[2]: var14_upvw (copied, read and write)
			[3]: Tween_upvr (copied, readonly)
			[4]: var16_upvw (copied, read and write)
		]]
		for i_2 = 1, arg1.count do
			local var40
			if var14_upvw then
				var40 = (Tween_upvr:GetValue(i_2 / arg1.count, "Quad", "In")) / (8 / var16_upvw)
			else
				var40 = (Tween_upvr:GetValue(i_2 / arg1.count, "Bounce", "In")) / (8 / var16_upvw)
			end
			task.wait(var40 / var16_upvw)
			game.SoundService.RollTick1:Play()
			game.SoundService.RollTick2:Play()
			if i_2 == 65 then
				game.SoundService.PreRolled1:Play()
				game.SoundService.PreRolled2:Play()
				Tween_upvr:Play(game.SoundService.PreRolled2, 2 / var16_upvw, {
					Volume = 0.2;
				})
			end
		end
		game.SoundService.Rolled1:Play()
		game.SoundService.Rolled2:Play()
	end)
end
local function _(arg1, arg2) -- Line 225, Named "barAnimation"
	--[[ Upvalues[3]:
		[1]: Tween_upvr (readonly)
		[2]: var16_upvw (read and write)
		[3]: var14_upvw (read and write)
	]]
	local var42_upvr
	if arg2 < 4 then
		var42_upvr = 2
	else
		var42_upvr = 1.6
	end
	task.spawn(function() -- Line 228
		--[[ Upvalues[5]:
			[1]: Tween_upvr (copied, readonly)
			[2]: arg1 (readonly)
			[3]: var16_upvw (copied, read and write)
			[4]: var14_upvw (copied, read and write)
			[5]: var42_upvr (readonly)
		]]
		Tween_upvr:Play(arg1.FalseFrame1.UIScale, 3 / var16_upvw, {
			Scale = 3;
		})
		Tween_upvr:Play(arg1.FalseFrame2.UIScale, 3 / var16_upvw, {
			Scale = 3;
		})
		Tween_upvr:Create(arg1.Frame, 1 / var16_upvw, "Quad", "Out", {
			Position = UDim2.fromScale(0.5, 0.5);
		}):Play()
		task.wait(0.5 / var16_upvw)
		Tween_upvr:Create(arg1.Frame.UIScale, 2 / var16_upvw, "Back", "Out", {
			Scale = 3;
		}):Play()
		Tween_upvr:Create(arg1.FalseFrame1.UIScale, 2 / var16_upvw, "Back", "Out", {
			Scale = 3.3;
		}):Play()
		Tween_upvr:Create(arg1.FalseFrame2.UIScale, 2 / var16_upvw, "Back", "Out", {
			Scale = 3.3;
		}):Play()
		task.wait(1 / var16_upvw)
		if var14_upvw then
			Tween_upvr:Create(arg1.Frame, 3 / var16_upvw, "Quart", "InOut", {
				Rotation = -45;
			}):Play()
			Tween_upvr:Create(arg1.FalseFrame1, 3 / var16_upvw, "Quart", "InOut", {
				Rotation = -45;
			}):Play()
			Tween_upvr:Create(arg1.FalseFrame2, 3 / var16_upvw, "Quart", "InOut", {
				Rotation = -45;
			}):Play()
		else
			Tween_upvr:Create(arg1.Frame, 3 / var16_upvw, "Quart", "InOut", {
				Rotation = 1035;
			}):Play()
			Tween_upvr:Create(arg1.FalseFrame1, 3 / var16_upvw, "Quart", "InOut", {
				Rotation = 1035;
			}):Play()
			Tween_upvr:Create(arg1.FalseFrame2, 3 / var16_upvw, "Quart", "InOut", {
				Rotation = 1035;
			}):Play()
		end
		task.wait(1 / var16_upvw)
		Tween_upvr:Create(arg1.Frame.UIScale, 1 / var16_upvw, "Back", "InOut", {
			Scale = var42_upvr;
		}):Play()
		Tween_upvr:Create(arg1.FalseFrame1.UIScale, 1 / var16_upvw, "Back", "InOut", {
			Scale = var42_upvr + 0.3;
		}):Play()
		Tween_upvr:Create(arg1.FalseFrame2.UIScale, 1 / var16_upvw, "Back", "InOut", {
			Scale = var42_upvr + 0.3;
		}):Play()
	end)
end
local MakeItRainbow_upvr = require(ReplicatedStorage_upvr.Modules.MakeItRainbow)
local function rollAnimation_upvr(arg1, arg2, arg3, arg4) -- Line 260, Named "rollAnimation"
	--[[ Upvalues[7]:
		[1]: MakeItRainbow_upvr (readonly)
		[2]: Rarity_upvr (readonly)
		[3]: Icons_upvr (readonly)
		[4]: Tween_upvr (readonly)
		[5]: var16_upvw (read and write)
		[6]: ReplicatedStorage_upvr (readonly)
		[7]: var14_upvw (read and write)
	]]
	if arg4 then
		arg1.Frame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		arg1.Frame.BackgroundTransparency = 0.75
		MakeItRainbow_upvr(arg1.Frame)
	end
	local function setUpCell(arg1_2, arg2_2) -- Line 268
		--[[ Upvalues[4]:
			[1]: Rarity_upvr (copied, readonly)
			[2]: Icons_upvr (copied, readonly)
			[3]: Tween_upvr (copied, readonly)
			[4]: var16_upvw (copied, read and write)
		]]
		arg1_2.RarityNumber.Text = RarityTable[Rarity_upvr[arg2_2.item_name]]
		arg1_2.Rarity.Image = Icons_upvr[Rarity_upvr[arg2_2.item_name]]
		arg1_2.Icon.Image = Icons_upvr[arg2_2.item_name]
		arg1_2.Highlight.LocalScript.Enabled = true
		Tween_upvr:Play(arg1_2.Highlight, 1 / var16_upvw, {
			ImageTransparency = 0.2;
		})
	end
	for i_3 = 1, arg2.count do
		local clone_upvr = ReplicatedStorage_upvr.Assets.UIs.RollPattern:Clone()
		clone_upvr.Position = UDim2.fromScale(arg2.startPos, 0.5)
		clone_upvr.Parent = arg1.Frame
		local fakeRoll_result1, fakeRoll_result2 = fakeRoll(arg4)
		clone_upvr.RarityNumber.Text = RarityTable[fakeRoll_result2]
		clone_upvr.Rarity.Image = Icons_upvr[fakeRoll_result2]
		clone_upvr.Icon.Image = Icons_upvr[fakeRoll_result1.item_name]
		if i_3 == 39 and arg3[1] then
			setUpCell(clone_upvr, arg3[1])
		elseif i_3 == 40 and arg3[2] then
			setUpCell(clone_upvr, arg3[2])
		elseif i_3 == 38 and arg3[3] then
			setUpCell(clone_upvr, arg3[3])
		elseif i_3 == 41 and arg3[4] then
			setUpCell(clone_upvr, arg3[4])
		elseif i_3 == 37 and arg3[5] then
			setUpCell(clone_upvr, arg3[5])
		end
		local var66_upvr = arg2.endPos + (arg2.startPos - arg2.endPos) * ((i_3 - 1) / (arg2.count - 1))
		task.spawn(function() -- Line 301
			--[[ Upvalues[5]:
				[1]: var14_upvw (copied, read and write)
				[2]: Tween_upvr (copied, readonly)
				[3]: arg2 (readonly)
				[4]: clone_upvr (readonly)
				[5]: var66_upvr (readonly)
			]]
			while true do
				local var67
				if var67 >= 1 then break end
				if var14_upvw then
					var67 = Tween_upvr:GetValue((tick() - tick()) / arg2.duration, "Quad", "Out")
				else
					-- KONSTANTERROR: Expression was reused, decompilation is incorrect
					var67 = Tween_upvr:GetValue((tick() - tick()) / arg2.duration, "Bounce", "Out")
				end
				clone_upvr.Position = UDim2.fromScale(arg2.startPos - (1 - (1 - var67) ^ 2) * (arg2.startPos - var66_upvr), 0.5)
				task.wait()
			end
			clone_upvr.Position = UDim2.fromScale(var66_upvr, 0.5)
		end)
		task.wait(arg2.duration / arg2.count / var16_upvw)
	end
end
function closeFrame(arg1) -- Line 322
	--[[ Upvalues[2]:
		[1]: Tween_upvr (readonly)
		[2]: var16_upvw (read and write)
	]]
	Tween_upvr:Create(arg1.Frame, 0.5 / var16_upvw, "Back", "In", {
		Size = UDim2.fromScale(10, 0);
	}):Play()
	Tween_upvr:Create(arg1.FalseFrame1, 0.5 / var16_upvw, "Quad", "Out", {
		Size = UDim2.fromScale(10, 0.5);
	}):Play()
	Tween_upvr:Create(arg1.FalseFrame2, 0.5 / var16_upvw, "Quad", "Out", {
		Size = UDim2.fromScale(10, 0.5);
	}):Play()
	Tween_upvr:Play(arg1.FalseFrame1.ImageLabel, 0.5 / var16_upvw, {
		ImageTransparency = 1;
	})
	Tween_upvr:Play(arg1.FalseFrame2.ImageLabel, 0.5 / var16_upvw, {
		ImageTransparency = 1;
	})
end
local EquipmentStats_upvr = require(ReplicatedStorage_upvr.Modules.Equipment.EquipmentStats)
local module_2_upvr = require(script:WaitForChild("SpecialRoll"))
function Roll(arg1, arg2) -- Line 331
	--[[ Upvalues[14]:
		[1]: Rarity_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: EquipmentStats_upvr (readonly)
		[4]: tbl_2_upvr (readonly)
		[5]: module_2_upvr (readonly)
		[6]: var15_upvw (read and write)
		[7]: LocalPlayer_upvr (readonly)
		[8]: var16_upvw (read and write)
		[9]: formatNumber_upvr (readonly)
		[10]: Icons_upvr (readonly)
		[11]: Tween_upvr (readonly)
		[12]: var14_upvw (read and write)
		[13]: playSounds_upvr (readonly)
		[14]: rollAnimation_upvr (readonly)
	]]
	local var94
	for i_4, v in pairs(arg1) do
		local var95
		if var95 == "Mythical" then
			var95 = nil
			for _, v_2 in pairs(ReplicatedStorage_upvr.Assets.Equipment:GetDescendants()) do
				if v_2.Name == v.item_name then
					var95 = v_2:Clone()
				end
			end
			local var99 = EquipmentStats_upvr[v.item_name]
			module_2_upvr(tbl_2_upvr[Rarity_upvr[v.item_name]] * v.Level * (var99.damage + var99.health) * v.stat_multiplier * 1000, var95)
		end
	end
	if nil then
	else
		local tbl = {
			startPos = 0.8;
			endPos = 0.2;
			duration = 3.5;
			count = 77;
		}
		if var15_upvw then
			v = LocalPlayer_upvr.PlayerGui.ScreenGui
			i_4 = v.UpperAlign
			for _, v_3 in pairs(i_4.Rolls:GetChildren()) do
				if v_3.Name ~= "UIListLayout" then
					v_3:Destroy()
				end
			end
			for _, v_4_upvr in pairs(arg1) do
				task.spawn(function() -- Line 386
					--[[ Upvalues[10]:
						[1]: ReplicatedStorage_upvr (copied, readonly)
						[2]: LocalPlayer_upvr (copied, readonly)
						[3]: var16_upvw (copied, read and write)
						[4]: EquipmentStats_upvr (copied, readonly)
						[5]: tbl_2_upvr (copied, readonly)
						[6]: Rarity_upvr (copied, readonly)
						[7]: formatNumber_upvr (copied, readonly)
						[8]: Icons_upvr (copied, readonly)
						[9]: Tween_upvr (copied, readonly)
						[10]: v_4_upvr (readonly)
					]]
					local clone_3 = ReplicatedStorage_upvr.Assets.UIs.HidenRollPattern:Clone()
					clone_3.Parent = LocalPlayer_upvr.PlayerGui.ScreenGui.UpperAlign.Rolls
					for i_8 = 1, 20 do
						task.wait(0.05 / var16_upvw)
						local clone_6 = ReplicatedStorage_upvr.Assets.UIs.SubHiddenRollPattern:Clone()
						local fakeRoll_result1_2, fakeRoll_result2_2 = fakeRoll()
						local var114 = EquipmentStats_upvr[fakeRoll_result1_2.item_name]
						clone_6.RarityNumber.Text = formatNumber_upvr(tbl_2_upvr[Rarity_upvr[fakeRoll_result1_2.item_name]] * (fakeRoll_result1_2.Level or 1) * (var114.damage + var114.health) * fakeRoll_result1_2.stat_multiplier * 1000)
						clone_6.Image = Icons_upvr[fakeRoll_result2_2]
						clone_6.Icon.Image = Icons_upvr[fakeRoll_result1_2.item_name]
						clone_6.Position = UDim2.fromScale(0.5, 0.3)
						clone_6.Parent = clone_3
						game.SoundService.RollTick1:Play()
						game.SoundService.RollTick2:Play()
						Tween_upvr:Create(clone_6, 0.1 / var16_upvw, "Quad", "Out", {
							Position = UDim2.fromScale(0.5, 0.6);
						}):Play()
						task.wait(0.1 * Tween_upvr:GetValue(i_8 / 20, "Quad", "Out") / var16_upvw)
						clone_6:Destroy()
					end
					local clone = ReplicatedStorage_upvr.Assets.UIs.SubHiddenRollPattern:Clone()
					clone.Position = UDim2.fromScale(0.5, 0.2)
					clone.Parent = clone_3
					local var117 = EquipmentStats_upvr[v_4_upvr.item_name]
					clone.RarityNumber.Text = formatNumber_upvr(tbl_2_upvr[Rarity_upvr[v_4_upvr.item_name]] * (v_4_upvr.Level or 1) * (var117.damage + var117.health) * v_4_upvr.stat_multiplier * 1000)
					clone.Image = Icons_upvr[Rarity_upvr[v_4_upvr.item_name]]
					clone.Icon.Image = Icons_upvr[v_4_upvr.item_name]
					Tween_upvr:Play(clone.RarityNumber, 0.5 / var16_upvw, {
						TextTransparency = 0;
					})
					game.SoundService.RollTick1:Play()
					game.SoundService.RollTick2:Play()
					Tween_upvr:Create(clone, 1.5 / var16_upvw, "Back", "Out", {
						Position = UDim2.fromScale(0.5, 0.6);
					}):Play()
					Tween_upvr:Create(clone.UIScale, 0.75 / var16_upvw, "Back", "Out", {
						Scale = 1.5;
					}):Play()
					game.SoundService.Rolled1:Play()
					game.SoundService.Rolled2:Play()
					task.wait(1 / var16_upvw)
					Tween_upvr:Create(clone, 1 / var16_upvw, "Back", "In", {
						Position = UDim2.fromScale(0.5, -2);
					}):Play()
					task.wait(1 / var16_upvw)
					clone:Destroy()
					clone_3:Destroy()
				end)
			end
			return
		end
		local clone_5 = ReplicatedStorage_upvr.Assets.UIs.RollingScreenGui:Clone()
		game.Debris:AddItem(clone_5, 10)
		clone_5.Parent = LocalPlayer_upvr.PlayerGui
		local RollingFrame_upvr = clone_5.RollingFrame
		local function var124_upvr() -- Line 140
			--[[ Upvalues[2]:
				[1]: RollingFrame_upvr (readonly)
				[2]: Tween_upvr (copied, readonly)
			]]
			for _ = 1, 5 do
				task.wait(0.02)
				local clone_4 = RollingFrame_upvr.FalseFrame1:Clone()
				clone_4.Position = RollingFrame_upvr.FalseFrame1.Position
				clone_4.ImageLabel.Visible = false
				clone_4.Parent = RollingFrame_upvr
				Tween_upvr:Play(clone_4.ImageLabel, 0.5, {
					ImageTransparency = 1;
				})
				game.Debris:AddItem(clone_4, 0.5)
				RollingFrame_upvr.FalseFrame1.Position = UDim2.fromScale(0.5 + math.random() / 30, 0.5 + math.random() / 30)
			end
			task.wait(0.02)
			RollingFrame_upvr.FalseFrame1.Position = UDim2.fromScale(0.5, 0.5)
		end
		task.spawn(var124_upvr)
		if #arg1 < 4 then
			var124_upvr = 2
		else
			var124_upvr = 1.6
		end
		task.spawn(function() -- Line 228
			--[[ Upvalues[5]:
				[1]: Tween_upvr (copied, readonly)
				[2]: RollingFrame_upvr (readonly)
				[3]: var16_upvw (copied, read and write)
				[4]: var14_upvw (copied, read and write)
				[5]: var124_upvr (readonly)
			]]
			Tween_upvr:Play(RollingFrame_upvr.FalseFrame1.UIScale, 3 / var16_upvw, {
				Scale = 3;
			})
			Tween_upvr:Play(RollingFrame_upvr.FalseFrame2.UIScale, 3 / var16_upvw, {
				Scale = 3;
			})
			Tween_upvr:Create(RollingFrame_upvr.Frame, 1 / var16_upvw, "Quad", "Out", {
				Position = UDim2.fromScale(0.5, 0.5);
			}):Play()
			task.wait(0.5 / var16_upvw)
			Tween_upvr:Create(RollingFrame_upvr.Frame.UIScale, 2 / var16_upvw, "Back", "Out", {
				Scale = 3;
			}):Play()
			Tween_upvr:Create(RollingFrame_upvr.FalseFrame1.UIScale, 2 / var16_upvw, "Back", "Out", {
				Scale = 3.3;
			}):Play()
			Tween_upvr:Create(RollingFrame_upvr.FalseFrame2.UIScale, 2 / var16_upvw, "Back", "Out", {
				Scale = 3.3;
			}):Play()
			task.wait(1 / var16_upvw)
			if var14_upvw then
				Tween_upvr:Create(RollingFrame_upvr.Frame, 3 / var16_upvw, "Quart", "InOut", {
					Rotation = -45;
				}):Play()
				Tween_upvr:Create(RollingFrame_upvr.FalseFrame1, 3 / var16_upvw, "Quart", "InOut", {
					Rotation = -45;
				}):Play()
				Tween_upvr:Create(RollingFrame_upvr.FalseFrame2, 3 / var16_upvw, "Quart", "InOut", {
					Rotation = -45;
				}):Play()
			else
				Tween_upvr:Create(RollingFrame_upvr.Frame, 3 / var16_upvw, "Quart", "InOut", {
					Rotation = 1035;
				}):Play()
				Tween_upvr:Create(RollingFrame_upvr.FalseFrame1, 3 / var16_upvw, "Quart", "InOut", {
					Rotation = 1035;
				}):Play()
				Tween_upvr:Create(RollingFrame_upvr.FalseFrame2, 3 / var16_upvw, "Quart", "InOut", {
					Rotation = 1035;
				}):Play()
			end
			task.wait(1 / var16_upvw)
			Tween_upvr:Create(RollingFrame_upvr.Frame.UIScale, 1 / var16_upvw, "Back", "InOut", {
				Scale = var124_upvr;
			}):Play()
			Tween_upvr:Create(RollingFrame_upvr.FalseFrame1.UIScale, 1 / var16_upvw, "Back", "InOut", {
				Scale = var124_upvr + 0.3;
			}):Play()
			Tween_upvr:Create(RollingFrame_upvr.FalseFrame2.UIScale, 1 / var16_upvw, "Back", "InOut", {
				Scale = var124_upvr + 0.3;
			}):Play()
		end)
		var124_upvr = tbl
		playSounds_upvr(var124_upvr)
		var124_upvr = RollingFrame_upvr
		rollAnimation_upvr(var124_upvr, tbl, arg1, arg2)
		var124_upvr = 2 / var16_upvw
		task.wait(var124_upvr)
		var124_upvr = RollingFrame_upvr
		closeFrame(var124_upvr)
		var124_upvr = 1 / var16_upvw
		task.wait(var124_upvr)
		clone_5:Destroy()
	end
end
local var144_upvw = 0
local var145_upvw = true
local RunService_upvr = game:GetService("RunService")
local function loadRollButton_upvr() -- Line 473, Named "loadRollButton"
	--[[ Upvalues[8]:
		[1]: var144_upvw (read and write)
		[2]: Shop_upvr (readonly)
		[3]: var16_upvw (read and write)
		[4]: var145_upvw (read and write)
		[5]: ReplicatedStorage_upvr (readonly)
		[6]: Tween_upvr (readonly)
		[7]: Energy_upvr (readonly)
		[8]: RunService_upvr (readonly)
	]]
	if tick() < var144_upvw or _G.ActiveUI == Shop_upvr then
	else
		var144_upvw = tick() + 5 / var16_upvw
		var145_upvw = false
		local any_InvokeServer_result1_3 = ReplicatedStorage_upvr.Remotes.Roll:InvokeServer()
		if not any_InvokeServer_result1_3 then return end
		Tween_upvr:Play(Energy_upvr, 0.2, {
			ImageTransparency = 0.5;
			ImageColor3 = Color3.fromRGB(150, 150, 150);
		})
		task.delay(0.1, function() -- Line 484
			--[[ Upvalues[2]:
				[1]: Tween_upvr (copied, readonly)
				[2]: Energy_upvr (copied, readonly)
			]]
			Tween_upvr:Play(Energy_upvr.Timer, 0.2, {
				ImageTransparency = 0;
			})
		end)
		local var152_upvw = 5 / var16_upvw
		task.spawn(function() -- Line 488
			--[[ Upvalues[4]:
				[1]: RunService_upvr (copied, readonly)
				[2]: var152_upvw (read and write)
				[3]: Tween_upvr (copied, readonly)
				[4]: Energy_upvr (copied, readonly)
			]]
			local var154_upvw
			var154_upvw = RunService_upvr.RenderStepped:Connect(function(arg1) -- Line 490
				--[[ Upvalues[4]:
					[1]: var152_upvw (copied, read and write)
					[2]: var154_upvw (read and write)
					[3]: Tween_upvr (copied, readonly)
					[4]: Energy_upvr (copied, readonly)
				]]
				var152_upvw -= arg1
				if var152_upvw <= 0 then
					var154_upvw:Disconnect()
					Tween_upvr:Play(Energy_upvr.Timer, 0.2, {
						ImageTransparency = 1;
					})
					Tween_upvr:Play(Energy_upvr, 0.2, {
						ImageTransparency = 0.1;
						ImageColor3 = Color3.fromRGB(255, 255, 255);
					})
				end
			end)
		end)
		Roll(any_InvokeServer_result1_3)
		var145_upvw = true
	end
end
